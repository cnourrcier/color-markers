h1 {
    text-align: center;
}

.container {
    background-color: rgb(255, 255, 255);
    padding: 10px 0;
}

.marker {
    height: 25px;
    width: 200px;
    margin: 10px auto;
    /* When margin has 2 values, sets margin-top and margin-bottom to first value and margin-left and margin-right to second value.*/
    /* margin: auto; */
    /* Sets margin-top, margin-right, margin-bottom, and margin-left all to auto.*/
}

.cap {
    width: 60px;
    height: 25px;
}

.sleeve {
    width: 110px;
    height: 25px;
    background-color: rgba(255, 255, 255, 0.5);
    /* border-left-width: 10px;
    border-left-style: solid;
    border-left-color: black; */
    border-left: 10px double rgba(0, 0, 0, 75%);
    /* The border-left shorthand property lets you to set the left border's width, style, and color at the same time. Syntax: border-left: width style color; */
    /* opacity: 0.5; */
}

/* Another way to set the opacity for an element is with the alpha channel. Similar to the opacity property, the alpha channel controls how transparent or opaque a color is.*/

.cap,
.sleeve {
    display: inline-block;
}

.red {
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
    /* box-shadow: -5px -5px red; */
    /* box-shadow: offsetX offsetY color; */
    box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);

}

.green {
    background: linear-gradient(#55680D, #71F53E, #116C31);
    /* box-shadow: 5px 5px 5px green; */
    /* box-shadow: offsetX offsetY blurRadius color; */
    box-shadow: 0 0 20px 0 #3B7E20CC;
    /* CC for alpha channel*/
}

.blue {
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
    box-shadow: 0 0 20px 0 hsl(223, 59%, 31%, 0.8);
    /* box-shadow: offsetX offsetY blurRadius spreadRadius color; */
}



/* There are two main color models: the additive RGB (red, green, blue) model used in electronic devices, 
and the subtractive CMYK (cyan, magenta, yellow, black) model used in print.*/

/* Secondary colors are the colors you get when you combine primary colors.*/
/* Tertiary colors are created by combining a primary with a nearby secondary color.*/

/* Hex color values start with a # character and take six characters from 0-9 and A-F. The first pair of characters represent red, the second pair represent green, and the third pair represent blue.*/
/* You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F*/

/* The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.*/
/* Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must add the percent sign % to the saturation and lightness values.*/

/* The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.*/
/* the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value.*/
/* example: linear-gradient(gradientDirection, color1, color2, ...);*/
/* gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl.*/
/* While the linear-gradient function needs a minimum of two color arguments to work, it can accept many color arguments.*/

/*sunset over water */
/* .example {
    background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(0, 0, 255) 100%);
} */